version: "3.9"

services:
  
  mysql:
    container_name: mysql_zenml
    restart: always
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - "$PWD/mysql-data:/var/lib/mysql"
    networks:
      - data_injection_nt  
  
  postgresql_interviewvedio:
    image: postgres:14
    container_name: postgresql_interviewvedio
    restart: always
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: session_db
    ports:
      - "5432:5432"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  
      - data_qa_io:/var/lib/postgresql/data1
      - ./db:/var/lib/postgresql/data1
      # - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./db/init1.sql:/docker-entrypoint-initdb.d/init1.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "psql -h localhost -U postgres_user -d session_db -c 'SELECT 1;'"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - data_injection_nt 
    depends_on:
      - mysql  
  zenml:
    # build:
    #   context: .
    #   dockerfile: ./Dockerfile_zenml
    container_name: zenml_service
    image: zenmldocker/zenml-server:0.58.2
    
    ports:
      - "8080:8080" #zenml dashboard
    environment:
      - ZENML_STORE_URL=${ZENML_STORE_URL}
      - ZENML_DEFAULT_USER_NAME={ZENML_DEFAULT_USER_NAME}
      - ZENML_DEFAULT_USER_PASSWORD=${ZENML_DEFAULT_USER_PASSWORD}
      # - ZENML_API_URL=http://web:8081
    links:
      - mysql
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: on-failure
    networks:
      - data_injection_nt
    depends_on:
      - mysql

  web:
    build:
      context: .
      dockerfile: ./Dockerfile_api
      
    ports:
      - "8081:8081" 
    volumes:
      - .:/opt/webapi/app
    environment:      
      - ZENML_BASE_URL=${ZENML_BASE_URL}
      - ZENML_API_TOKEN=${ZENML_API_TOKEN}
    networks:
      - data_injection_nt
  
    depends_on:
      - zenml      
     
  mlflow:
    build:
      context: .
      dockerfile: ./Dockerfile_mlflow
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - ARTIFACT_STORE=${ARTIFACT_STORE}
      - MLFLOW_ARTIFACT_ROOT=${MLFLOW_ARTIFACT_ROOT}
    ports:
      - "5002:5002"
    volumes:
      - mlflow_data:/app/mlflow
      - ./mlruns:/mlflow/mlruns
    networks:
      - data_injection_nt
  
    depends_on:
      - zenml       

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - data_injection_nt
  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - data_injection_nt

  standalone:
    container_name: standalone
    image: milvusdb/milvus:v2.3.3
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - data_injection_nt  

  attu:
    container_name: attu
    image: zilliz/attu:latest
    environment:
      MILVUS_URL: milvus-standalone:19530
    networks:
      - data_injection_nt  
    ports:
      - "8003:3000" 
    depends_on:
      - "standalone"  
  
networks:
  data_injection_nt:
    driver: bridge
 
volumes:
  data_qa_io:
  mlflow_data:

 
